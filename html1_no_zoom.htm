<!DOCTYPE html>

<!-- saved from url=(0056)https://yash-kalariya.github.io/test_html_page/html1.htm -->
<html style="height:100%; touch-action:none;"><head><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><script id="eppiocemhmnlbhjplcgkofciiegomcon" src="chrome-extension://eppiocemhmnlbhjplcgkofciiegomcon/content/location/location.js">
  // Disable Ctrl + trackpad zoom
  window.addEventListener("wheel", function(event) {
    if (event.ctrlKey) {
      event.preventDefault();
    }
  }, { passive: false });

  // Disable Ctrl + '+' / '-' zoom
  window.addEventListener("keydown", function(event) {
    if ((event.ctrlKey || event.metaKey) &&
        (event.key === '+' || event.key === '-' || event.key === '=')) {
      event.preventDefault();
    }
  });

</script><script src="chrome-extension://eppiocemhmnlbhjplcgkofciiegomcon/libs/extend-native-history-api.js"></script><script src="chrome-extension://eppiocemhmnlbhjplcgkofciiegomcon/libs/requests.js"></script>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport"/>
<script bis_use="true" charset="utf-8" data-bis-config='["facebook.com/","twitter.com/","youtube-nocookie.com/embed/","//vk.com/","//www.vk.com/","linkedin.com/","//www.linkedin.com/","//instagram.com/","//www.instagram.com/","//www.google.com/recaptcha/api2/","//hangouts.google.com/webchat/","//www.google.com/calendar/","//www.google.com/maps/embed","spotify.com/","soundcloud.com/","//player.vimeo.com/","//disqus.com/","//tgwidget.com/","//js.driftt.com/","friends2follow.com","/widget","login","//video.bigmir.net/","blogger.com","//smartlock.google.com/","//keep.google.com/","/web.tolstoycomments.com/","moz-extension://","chrome-extension://","/auth/","//analytics.google.com/","adclarity.com","paddle.com/checkout","hcaptcha.com","recaptcha.net","2captcha.com","accounts.google.com","www.google.com/shopping/customerreviews","buy.tinypass.com","gstatic.com","secureir.ebaystatic.com","docs.google.com","contacts.google.com","github.com","mail.google.com","chat.google.com","audio.xpleer.com","keepa.com","static.xx.fbcdn.net","sas.selleramp.com","1plus1.video","console.googletagservices.com","//lnkd.demdex.net/","//radar.cedexis.com/","//li.protechts.net/","challenges.cloudflare.com/","ogs.google.com"]' src="chrome-extension://eppiocemhmnlbhjplcgkofciiegomcon/executors/traffic.js" type="text/javascript"></script><style>
html, body, iframe {
  touch-action: none !important;
  overscroll-behavior: none !important;
}
</style></head>
<body __processed_a430f670-1c72-4c6d-8e07-d33c9d25b766__="true" bis_register="W3sibWFzdGVyIjp0cnVlLCJleHRlbnNpb25JZCI6ImVwcGlvY2VtaG1ubGJoanBsY2drb2ZjaWllZ29tY29uIiwiYWRibG9ja2VyU3RhdHVzIjp7IkRJU1BMQVkiOiJlbmFibGVkIiwiRkFDRUJPT0siOiJlbmFibGVkIiwiVFdJVFRFUiI6ImVuYWJsZWQiLCJSRURESVQiOiJlbmFibGVkIiwiUElOVEVSRVNUIjoiZW5hYmxlZCIsIklOU1RBR1JBTSI6ImVuYWJsZWQiLCJUSUtUT0siOiJkaXNhYmxlZCIsIkxJTktFRElOIjoiZW5hYmxlZCIsIkNPTkZJRyI6ImRpc2FibGVkIn0sInZlcnNpb24iOiIyLjAuMjYiLCJzY29yZSI6MjAwMjYwfV0=" style="height: 100%; padding: 0; margin: 0;; touch-action:none;">
<div bis_skin_checked="1" class="card" style="background-image: url('https://questapp.dev/uat/admin-service/public/api/v2/ple_content_media?media=ple/content/media/YBSoIFRvbfcJxh9YFaVYMqZuzv4xVXHPB0Fdd0yA.jpg');">
<div bis_skin_checked="1" class="card-content">
<div bis_skin_checked="1" class="card-header" style="transform: translate(17px, 0px); text-align: center; font-family: Arial, Arial, sans-serif !important; font-size: 32px !important; color: #ffffff !important">testing new responsie layout as center alignement</div>
<div bis_skin_checked="1" class="card-subhead" style="transform: translate(19px, 0px); text-align: center; font-family: Arial, Arial, sans-serif !important; font-size: 20px !important; color: #ffffff !important">testing new responsie layout as center alignement</div>
<div bis_skin_checked="1" class="media-wrapper" style="left:38px; top:119px; position: absolute;">
<img alt="Image 1" class="card-media" src="./html1_files/ple_content_media" style="width: 300px; height: 200px; display: inline-block;"/>
</div>
<div bis_skin_checked="1" class="response-input-container">
<textarea class="response-input" id="responseInput" onkeydown="setTimeout(()=&gt;{sendData({type: 'text',data: this.value})})" placeholder="Type your answer here..." style="transform: translate(27px, 39px);"></textarea>
</div>
</div>
</div>
<style>
      *{
      box-sizing: border-box;
      padding: 0px;
      }
      .card {
        position: relative;
        background: #fff;
        border-radius: 16px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        margin: 0 auto;
        font-family: 'Inter', Arial, sans-serif;
        background-size: cover;
        background-position: center;
        min-height: 100%;
        max-width: 385px;
        touch-action: none;
      }
      .media-wrapper {
        display: inline-block;
        width: fit-content;
      }
      .card-header {
        line-height: 1.2;
        display: block;
        // width: fit-content;
        max-width: 350px;
      }
      .card-subhead {
        margin-bottom: 0.5rem;
        display: block;
        // width: fit-content;
        max-width: 350px;
      }
      .card-text {
        display: block;
        // width: fit-content;
        max-width: 350px;
      }
      .response-input-container {
        margin-top: 0.5rem;
        max-width: 350px;
      }
      .response-input {
        width: 100%;
        min-height: 120px;
        border: 1.5px solid #ececec;
        border-radius: 10px;
        padding: 1rem;
        font-size: 1rem;
        color: #222;
        background: #fafbfc;
        resize: vertical;
        box-sizing: border-box;
      }
      .response-input::placeholder {
        color: #b4b4b4;
        opacity: 1;
      }
      .single-choice-preview {
        background: none;
        padding: 0;
      }
      .single-choice-option {
        display: flex;
        align-items: flex-start;
        background: #fff;
        border-radius: 16px;
        border: 1.5px solid #e0e0e0;
        padding: .5rem .5rem;
        margin-bottom: .5rem;
        min-height: 45px;
        gap: 0.5rem;
      }
      .single-choice-option input[type='radio'] {
        margin-right: .5rem;
        margin-top: 0.2rem;
        accent-color: #0275bb;
        height: 20px;
        flex-shrink: 0;
      }
      .single-choice-option input[type='checkbox'] {
        margin-right: .5rem;
        margin-top: 0.2rem;
        accent-color: #0275bb;
        height: 20px;
        flex-shrink: 0;
      }
      .single-choice-option span {
        display: block;
        line-height: 1.4;
        word-break: break-word;
        flex: 1;
      }
      .upload-section {
        text-align: center;
        margin-top: 1.5rem;
      }
      .upload-title {
        font-size: 1.1rem;
        font-weight: 500;
        margin-bottom: 1rem;
        color: #686868;
      }
      .upload-options {
        display: flex;
        gap: 1.5rem;
        justify-content: center;
      }
      .upload-option {
        display: flex;
        flex-direction: column;
        cursor: pointer;
      }
      .upload-icon {
        width: 56px;
        height: 56px;
        background: #F3F7FB;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .upload-label {
        font-size: 1rem;
        color: #686868;
        margin-top: 0.2rem;
      }
      .upload-option input[type="file"] {
        display: none;
      }
      
      .upload-preview-container {
        margin-top: 1rem;
        display: none;
      }
      
      .uploaded-file-preview {
        display: flex;
        align-items: center;
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 12px 16px;
        max-width: 100%;
        position: relative;
      }
      
      .file-thumbnail {
        width: 60px;
        height: 60px;
        border-radius: 8px;
        overflow: hidden;
        margin-right: 16px;
        flex-shrink: 0;
        background: #fff;
        border: 1px solid #dee2e6;
      }
      
      .preview-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
      }
      
      .file-info {
        flex: 1;
        min-width: 0;
      }
      
      .file-name {
        font-size: 0.9rem;
        color: #495057;
        font-weight: 500;
        word-break: break-word;
        line-height: 1.4;
      }
      
      .remove-file-btn {
        background: none;
        border: none;
        color: #6c757d;
        cursor: pointer;
        padding: 8px;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        flex-shrink: 0;
        margin-left: 12px;
      }
      
      .remove-file-btn:hover {
        background: #e9ecef;
        color: #dc3545;
      }
      
      .audio-recording-section {
        text-align: center;
        margin-top: 2.5rem;
      }
      .audio-record-btn {
        display: flex;
        align-items: center;
        border: 2px solid #eaf2fc;
        border-radius: 32px;
        background: #f8fbff;
        color: #3B5BDB;
        font-size: 1.1rem;
        font-weight: 500;
        padding: 0.8rem 2.5rem;
        cursor: pointer;
        transition: background 0.2s, border 0.2s;
        margin: 0 auto;
        box-shadow: none;
        outline: none;
      }
      .audio-record-btn:hover {
        background: #eaf2fc;
        border-color: #d0e2ff;
      }
      .mic-icon {
        display: flex;
        align-items: center;
        margin-right: 0.7rem;
      }
      .audio-record-label {
        color: #3B5BDB;
        font-size: 1.1rem;
        font-weight: 500;
      }
      </style>
<script>
      window.addEventListener('message', windowMessageHandler, false);

      function windowMessageHandler(e) {
        uploadData = typeof e.data === "string" ? JSON.parse(e.data) : e.data;
        if (uploadData.type === "upload_file_name") {
          document.getElementById("uploadSection").style.display = "none";
          const fileName = uploadData.data;
          document.getElementById("fileNameDisplay").textContent = fileName;
          document.getElementById("uploadSectionPreview").style.display = "block";
          
          const fileExtension = fileName.split('.').pop()?.toLowerCase();
          const previewImage = document.getElementById("uploadSectionPreviewImage");
          
          if (uploadData.image_blob != undefined) {
            const imageBlob = uploadData.image_blob;
            const parts = imageBlob.split(";base64,");
            const contentType = parts[0].split(":")[1];
            const base64Data = parts[1];

            const byteCharacters = atob(base64Data);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
              byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            const imageBlobVal = new Blob([byteArray], { type: contentType });
            const imageUrl = URL.createObjectURL(imageBlobVal);
            previewImage.src = imageUrl;
          } else {
            if (fileExtension && ['mp3', 'wav', 'ogg', 'm4a', 'aac'].includes(fileExtension)) {
              const audioSvg = '<svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="60" height="60" rx="8" fill="#E3F2FD"/><circle cx="30" cy="30" r="18" fill="#2196F3"/><path d="M25 22v16l12-8-12-8z" fill="white"/><path d="M20 18h2v24h-2z" fill="#2196F3"/><path d="M38 18h2v24h-2z" fill="#2196F3"/></svg>';
              previewImage.src = "data:image/svg+xml;base64," + btoa(audioSvg);
            } else if (fileExtension && ['pdf', 'doc', 'docx', 'ppt', 'pptx', 'txt'].includes(fileExtension)) {
              const docSvg = '<svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="60" height="60" rx="8" fill="#F3E5F5"/><rect x="12" y="8" width="36" height="44" rx="4" fill="#9C27B0"/><rect x="16" y="12" width="28" height="2" rx="1" fill="white"/><rect x="16" y="18" width="20" height="2" rx="1" fill="white"/><rect x="16" y="24" width="24" height="2" rx="1" fill="white"/><rect x="16" y="30" width="16" height="2" rx="1" fill="white"/><rect x="16" y="36" width="22" height="2" rx="1" fill="white"/><rect x="16" y="42" width="18" height="2" rx="1" fill="white"/></svg>';
              previewImage.src = "data:image/svg+xml;base64," + btoa(docSvg);
            } else if (fileExtension && ['mp4', 'webm', 'ogg', 'avi', 'mov'].includes(fileExtension)) {
              const videoSvg = '<svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="60" height="60" rx="8" fill="#E8F5E8"/><rect x="12" y="12" width="36" height="36" rx="4" fill="#4CAF50"/><path d="M24 20v20l18-10-18-10z" fill="white"/></svg>';
              previewImage.src = "data:image/svg+xml;base64," + btoa(videoSvg);
            } else {
              const genericSvg = '<svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="60" height="60" rx="8" fill="#F5F5F5"/><rect x="12" y="8" width="36" height="44" rx="4" fill="#757575"/><rect x="16" y="12" width="28" height="2" rx="1" fill="white"/><rect x="16" y="18" width="20" height="2" rx="1" fill="white"/><rect x="16" y="24" width="24" height="2" rx="1" fill="white"/><rect x="16" y="30" width="16" height="2" rx="1" fill="white"/></svg>';
              previewImage.src = "data:image/svg+xml;base64," + btoa(genericSvg);
            }
          }
        } else if (uploadData.type === "radioValue") {
          document
            .querySelectorAll(".single-choice-option")
            .forEach((option) => {
              option.childNodes.forEach((childOption) => {
                if (childOption.nodeName == "SPAN") {
                  if (childOption.textContent == uploadData.data) {
                    childOption.previousElementSibling.checked = true;
                  }
                }
              });
            });
        } else if (uploadData.type === "textValue") {
          var responseInput = document.getElementById("responseInput");
          responseInput.innerText = uploadData.data;
        } else if (uploadData.type === "checkboxValue") {
          document
            .querySelectorAll('#mcqPreview input[type="checkbox"]')
            .forEach((checkbox) => {
              if (checkbox.nextElementSibling.textContent == uploadData.data) {
                checkbox.checked = true;
              }
            });
        } else if (uploadData.type === "blobBaseValue") {
          const base64String = uploadData.data;
          const parts = base64String.split(";base64,");
          const contentType = parts[0].split(":")[1];
          const base64Data = parts[1];

          const byteCharacters = atob(base64Data);
          const byteNumbers = new Array(byteCharacters.length);
          for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
          }
          const byteArray = new Uint8Array(byteNumbers);
          const audioBlob = new Blob([byteArray], { type: contentType });
          document.getElementById("audioRecordingUI").style.display = "none";
          document.getElementById("audioStartContainer").style.display = "none";
          audioUrl = URL.createObjectURL(audioBlob);
          document.getElementById("audioPlayback").src = audioUrl;
          document.getElementById("audioPlaybackUI").style.display = "flex";
          document.getElementById("audioPlayback").oncanplaythrough =
            function () {
              if (this.duration && isFinite(this.duration)) {
                document.getElementById("audioPlaybackTimer").textContent =
                  formatTime(this.duration);
              }
            };
        } else if (uploadData.type === "uploadDocValue") {
          const fileName = uploadData.data;
          document.getElementById("uploadSection").style.display = "none";
          document.getElementById("fileNameDisplay").textContent = fileName;
          document.getElementById("uploadSectionPreview").style.display = "block";
          
          const docSvg = '<svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="60" height="60" rx="8" fill="#F3E5F5"/><rect x="12" y="8" width="36" height="44" rx="4" fill="#9C27B0"/><rect x="16" y="12" width="28" height="2" rx="1" fill="white"/><rect x="16" y="18" width="20" height="2" rx="1" fill="white"/><rect x="16" y="24" width="24" height="2" rx="1" fill="white"/><rect x="16" y="30" width="16" height="2" rx="1" fill="white"/><rect x="16" y="36" width="22" height="2" rx="1" fill="white"/><rect x="16" y="42" width="18" height="2" rx="1" fill="white"/></svg>';
          document.getElementById("uploadSectionPreviewImage").src = "data:image/svg+xml;base64," + btoa(docSvg);
        } else if (uploadData.type === "uploadGalleryValue") {
          const fileName = uploadData.data;
          document.getElementById("uploadSection").style.display = "none";
          document.getElementById("fileNameDisplay").textContent = fileName;
          document.getElementById("uploadSectionPreview").style.display = "block";
          
          const imageSvg = '<svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="60" height="60" rx="8" fill="#E8F5E8"/><rect x="12" y="12" width="36" height="36" rx="4" fill="#4CAF50"/><circle cx="20" cy="20" r="3" fill="white"/><path d="M12 36l8-8 4 4 8-8 8 8v8H12z" fill="white"/></svg>';
          document.getElementById("uploadSectionPreviewImage").src = "data:image/svg+xml;base64," + btoa(imageSvg);
        } else if (uploadData.type === "uploadAudioValue") {
          const fileName = uploadData.data;
          document.getElementById("uploadSection").style.display = "none";
          document.getElementById("fileNameDisplay").textContent = fileName;
          document.getElementById("uploadSectionPreview").style.display = "block";
          
          const audioSvg = '<svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="60" height="60" rx="8" fill="#E3F2FD"/><circle cx="30" cy="30" r="18" fill="#2196F3"/><path d="M25 22v16l12-8-12-8z" fill="white"/><path d="M20 18h2v24h-2z" fill="#2196F3"/><path d="M38 18h2v24h-2z" fill="#2196F3"/></svg>';
          document.getElementById("uploadSectionPreviewImage").src = "data:image/svg+xml;base64," + btoa(audioSvg);
        } else if (uploadData.type === "uploadImgValue") {
          const fileName = uploadData.data;
          document.getElementById("uploadSection").style.display = "none";
          document.getElementById("fileNameDisplay").textContent = fileName;
          document.getElementById("uploadSectionPreview").style.display = "block";
          
          const cameraSvg = '<svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="60" height="60" rx="8" fill="#FFF3E0"/><rect x="12" y="16" width="36" height="28" rx="4" fill="#FF9800"/><circle cx="30" cy="30" r="6" fill="white"/><rect x="24" y="12" width="12" height="8" rx="2" fill="#FF9800"/></svg>';
          document.getElementById("uploadSectionPreviewImage").src = "data:image/svg+xml;base64," + btoa(cameraSvg);
        }
      }
      window.onload = function() {
        var responseTypes = ["text"];
        var mcqOptions = [];
        var singleOptions = [];
        if (responseTypes.includes('mcq') && typeof mcqOptions !== 'undefined' && Array.isArray(mcqOptions)) {
          var mcqScore = mcqOptions.reduce(function(sum, opt) {
            return sum + (parseFloat(opt.score) || 0);
          }, 0);
        } else if (responseTypes.includes('single_choice') && typeof singleOptions !== 'undefined' && Array.isArray(singleOptions)) {
          var singleChoiceScore = singleOptions.reduce(function(sum, opt) {
            return sum + (parseFloat(opt.score) || 0);
          }, 0);
        }
        sendData({ responseTypes, mcqScore, singleChoiceScore });
      };
        
            let isRecording = false;
            let mediaRecorder;
            let recordedChunks = [];
            let audioBlob = null;
            let audioUrl = null;
            let recordStartTime = 0;
            let recordTimerInterval = null;
            const btn = document.getElementById('audioRecordStartBtn');
            if(btn) {
              btn.onclick = function () {
                document.getElementById('audioStartContainer').style.display = 'none';
                document.getElementById('audioRecordingUI').style.display = 'flex';
                startRecording();
              };
            }
            function pauseRecording() {
              mediaRecorder.pause();
              console.log("Recorder paused.");
              if (recordTimerInterval) clearInterval(recordTimerInterval);
            }
            function resumeRecording() {
              mediaRecorder.resume();
              console.log("Recorder resumed.");
              recordStartTime = Date.now() - (getSecondsFromTimer() * 1000);
              if (recordTimerInterval) clearInterval(recordTimerInterval);
              recordTimerInterval = setInterval(function() {
                let elapsed = Math.floor((Date.now() - recordStartTime) / 1000);
                document.getElementById('audioTimer').textContent = formatTime(elapsed);
              }, 500);
            }
            function stopRecording() {
              mediaRecorder.stop();
              console.log("Recorder stopped.");
              document.getElementById('audioRecordingUI').style.display = 'none';
              if (recordTimerInterval) clearInterval(recordTimerInterval);
              setTimeout(function() {
                if(audioUrl) URL.revokeObjectURL(audioUrl);
                audioBlob = new Blob(recordedChunks, { type: 'audio/webm' });
                audioUrl = URL.createObjectURL(audioBlob);
                document.getElementById('audioPlayback').src = audioUrl;
                document.getElementById('audioPlaybackUI').style.display = 'flex';
                document.getElementById('audioPlayback').oncanplaythrough = function() {
                  if (this.duration && isFinite(this.duration)) {
                      document.getElementById('audioPlaybackTimer').textContent = formatTime(this.duration);
                  }
                };
              }, 100);
            }
            function resetAudioUI() {
              document.getElementById('audioPlaybackUI').style.display = 'none';
              document.getElementById('audioRecordingUI').style.display = 'none';
              document.getElementById('audioStartContainer').style.display = 'block';
              recordedChunks = [];
              audioBlob = null;
              if(audioUrl) URL.revokeObjectURL(audioUrl);
              audioUrl = null;
              if (recordTimerInterval) clearInterval(recordTimerInterval);
              document.getElementById('audioTimer').textContent = "00:00";
            }
            function startRecording() {
              recordedChunks = [];
              navigator.mediaDevices.getUserMedia({ audio: true }).then(function(stream) {
                mediaRecorder = new MediaRecorder(stream);
                mediaRecorder.ondataavailable = function(e) {
                  if (e.data.size > 0) recordedChunks.push(e.data);
                };
                mediaRecorder.onstop = function() {
                  stream.getTracks().forEach(track => track.stop());
                  audioBlob = new Blob(recordedChunks, { type: 'audio/webm' });

                  blobToBase64(audioBlob).then((blob64Data) => {
                    let data = { type: "blob base", data: blob64Data };
                    sendData(data);
                  });
                };
                mediaRecorder.start();
                console.log("Recorder started.");
                recordStartTime = Date.now();
                document.getElementById('audioTimer').textContent = "00:00";
                if (recordTimerInterval) clearInterval(recordTimerInterval);
                recordTimerInterval = setInterval(function() {
                  let elapsed = Math.floor((Date.now() - recordStartTime) / 1000);
                  document.getElementById('audioTimer').textContent = formatTime(elapsed);
                }, 500);
              });
            }
            function getSecondsFromTimer() {
              var timerText = document.getElementById('audioTimer').textContent;
              var parts = timerText.split(':');
              return parseInt(parts[0], 10) * 60 + parseInt(parts[1], 10);
            }
            if(document.getElementById('audioPlayBtn')) {
              document.getElementById('audioPlayBtn').onclick = function() {
                var audio = document.getElementById('audioPlayback');
                var playIcon = document.getElementById('audioPlayIcon');
                var pauseIcon = document.getElementById('audioPauseIcon');
                if (audio.paused) {
                  audio.play();
                  playIcon.style.display = 'none';
                  pauseIcon.style.display = 'inline';
                } else {
                  audio.pause();
                  playIcon.style.display = 'inline';
                  pauseIcon.style.display = 'none';
                }
              };
            }
            if(document.getElementById('audioPlayback')) {
              document.getElementById('audioPlayback').ontimeupdate = function() {
                document.getElementById('audioPlaybackTimer').textContent = formatTime(this.currentTime);
              };
            }
            if(document.getElementById('audioPlayback')) {
              document.getElementById('audioPlayback').onended = function() {
                document.getElementById('audioPlayIcon').style.display = 'inline';
                document.getElementById('audioPauseIcon').style.display = 'none';
              };
            }
            function formatTime(sec) {
              sec = Math.floor(sec);
              let m = Math.floor(sec / 60);
              let s = sec % 60;
              return (m < 10 ? '0' : '') + m + ':' + (s < 10 ? '0' : '') + s;
            }

      function blobToBase64(blob) {
        return new Promise((resolve, _) => {
          const reader = new FileReader();
          reader.onloadend = () => resolve(reader.result);
          reader.readAsDataURL(blob);
        });
      }

      function sendData(data) {
        const myJSON = JSON.stringify(data);
        console.log(myJSON);
        window.parent.postMessage(myJSON, "*");
        MyQuestAndroid.postMessage(myJSON);
      }

      function removeUploadedFile() {
        document.getElementById("uploadSectionPreview").style.display = "none";
        document.getElementById("uploadSection").style.display = "block";
        document.getElementById("fileNameDisplay").textContent = "";
        document.getElementById("uploadSectionPreviewImage").src = "";        
        sendData({ type: "removeUploadedFile" });
      }
        
      document.querySelectorAll('#mcqPreview input[type="checkbox"]').forEach((checkbox) => {
        checkbox.addEventListener('change', sendCheckboxData);
      });

      function sendCheckboxData() {
        const selected = Array.from(
          document.querySelectorAll(
            '#mcqPreview input[type="checkbox"]:checked'
          )
        ).map((cb) => cb.value);

        const selectedData = Array.from(
          document.querySelectorAll(
            '#mcqPreview input[type="checkbox"]:checked'
          )
        ).map((cb) => {
          return cb.nextElementSibling.textContent;
        });

        const data = {
          type: "checkbox",
          value: selected,
          data: selectedData,
        };

        const myJSON = JSON.stringify(data);
        console.log(myJSON);
        window.parent.postMessage(myJSON, "*");
        MyQuestAndroid.postMessage(myJSON);
      }
    </script><iframe class="adsbox ads ad adsbox doubleclick ad-placement carbon-ads" src="./html1_files/html.html" style="position: absolute; visibility: hidden; z-index: -9999;"> </iframe></body></html>
